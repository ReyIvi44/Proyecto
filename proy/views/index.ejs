<!DOCTYPE html>
<html class=" estilo-scroll">
  <% include header %>
  <body class=" estilo-scroll" style="background-color: #fafaf0;">
    <script src="/javascripts/randompoints.js"></script>

    <style>#map {height:800px} </style>

 <section class="hero text-white" style="margin: 0; padding: 0; width: 100vw; height: 100vh;">
    <div class="overlay"></div>

    <div class="position-absolute top-50 start-0 translate-middle-y ps-5" style="z-index: 2;padding-bottom: 400px;">
      <h1 class="display-3 fw-bold mb-4" style="z-index: 2; position:relative; font-size: 8em;padding-left: 200px ;">GUADAWAY</h1>
      <p class="lead" style="z-index: 2; position:relative; font-size: 2.1em;padding-left: 230px ;">Cada sendero es una aventura</p>
    </div>

    <div class="text-center position-absolute bottom-0 start-50 translate-middle-x mb-4" style="z-index: 2;">
      <a href="#contenido" class="btn btn-dark rounded-pill px-5 py-4 scroll-btn" style="font-size: 1.8rem;bottom: 150px;">
        &#x2193; Explora m√°s
      </a>
    </div>
</section>

    <!-- Titulo de guadaway linea 18 routes/index.js-->
     <div id="contenido" class="container-fluid">
    

    <div style="position: absolute;top: 960px; right: 40px;z-index: 22;"><% include pesta√±ausuario %></div>
    <% if (user) { %>
      <p id = "titulo-principal" style="position: absolute; top: 1040px; left: 1780px; z-index: 21;">
        <strong><%= user.name %> <%= user.surname %></strong>
      </p>
      <% } else { %>
        <p style="position: absolute; top: 1040px; left: 1807px; z-index: 21;">
        <strong>Invitado</strong>
        </p>
      <% } %>
    </div>

    <!-- Buscador para las busqueda de las diferentes rutas, deberia tener desplegable y las diferentes rutas recomendadas a partir de la escritura-->
    <div class="busqueda-wrapper" style="margin: 20px;">
      <form class="form-inline" action="/rutaespecifica" method="GET">
        <div class="input-group1 w-100 mb-4">
          <input type="text" class="form-control" name="Buscar" id="search-input" placeholder="Buscar por nombre de ruta">
        </div>
      </form>

      <div id="sugerencias-container"></div>
    </div>

<script>
  const buscador = document.getElementById("search-input");
  const sugerenciasDiv = document.getElementById("sugerencias-container");
  sugerenciasDiv.classList.add("sugerencias-recuadro");

  buscador.addEventListener("input", async function () {
    const texto = this.value.toLowerCase();
    sugerenciasDiv.innerHTML = ""; // Limpiar sugerencias anteriores

    if (texto.length === 0) {
      sugerenciasDiv.style.display = "none"; // Ocultar si est√° vac√≠o
      return;
    }

    try {
      const res = await fetch(`/autocomplete?query=${encodeURIComponent(texto)}`);
      const resultados = await res.json();

      if (resultados.length === 0) {
        sugerenciasDiv.style.display = "none"; // Ocultar si no hay resultados
        return;
      }

      // Mostrar contenedor de sugerencias
      sugerenciasDiv.style.display = "block";

      resultados.slice(0, 5).forEach(ruta => {
        const div = document.createElement("div");
        div.innerHTML = `<strong>${ruta.Nombre}</strong> - Dificultad: ${ruta.Dificultad} - Duraci√≥n: ${ruta["Duraci√≥n (h)"]}h`;
        div.classList.add("sugerencia-item");

        div.addEventListener("click", function () {
          const nombreRuta = encodeURIComponent(ruta.Nombre);
          window.location.href = `/rutaespecifica/${nombreRuta}`;
        });

        sugerenciasDiv.appendChild(div);
      });

    } catch (error) {
      console.error("Error al buscar rutas:", error);
      sugerenciasDiv.style.display = "none"; // Ocultar si hay error
    }
  });

  // Tambi√©n puedes ocultar sugerencias si se hace clic fuera
  document.addEventListener("click", function (event) {
    if (!sugerenciasDiv.contains(event.target) && event.target !== buscador) {
      sugerenciasDiv.style.display = "none";
    }
  });
</script>
  <!-- Filtros, todavia faltan por referenciarlos y crear los que faltan, espaciado, BASE DE DATOS-->
    <div class="form-group" style="margin: 20px;">
      <select id="filtroDuracion" class="col-sm-2">
        <option value="" disabled selected>Duraci√≥n</option>
        <option value="Menos de una hora">Menos de una hora</option>
        <option value="Entre 1 y 2 horas">Entre 1 y 2 horas</option>
        <option value="Entre 2 y 4 horas">Entre 2 y 4 horas</option>
        <option value="Entre 4 y 6 horas">Entre 4 y 6 horas</option>
        <option value="M√°s de 6 horas">M√°s de 6 horas</option>
      </select>
      <select id="filtroLongitud">
        <option value="" disabled selected>Longitud</option>
        <option value="Menos de 5 km">Menos de 5 km</option>
        <option value="De 5 a 10 km">De 5 a 10 km</option>
        <option value="De 10 a 15 km">De 10 a 15 km</option>
        <option value="De 15 a 20 km">De 15 a 20 km</option>
        <option value="M√°s de 20 km">M√°s de 20 km</option>
      </select>
      <select id="filtroDificultad">
        <option value="" disabled selected>Dificultad</option>
        <option value="Baja">Baja</option>
        <option value="Media">Media</option>
        <option value="Alta">Alta</option>
      </select>
      <select id="filtroSentido">
        <option value="" disabled selected>Sentido</option>
        <option value="Circular">Circular</option>
        <option value="Ida">Ida</option>
        <option value="Ida y Vuelta">Ida y Vuelta</option>
      </select>
      <button id="aplicarFiltros">Aplicar filtros</button>
      <button id="btn-medir">Medir distancia</button>
      <div id="mensajeFiltros"></div>

    </div>

    <script>
      let midiendo = false;
      let puntosMedicion = [];
      let lineaMedicion = null;
      let marcadorInicio = null;
      let marcadorFin = null;
      let puntosInteresLayerGroup;
      let controlCapas;
      $( document ).ready(function(){
        $('#registrar').on('submit', function (event) {
          event.preventDefault();
          var randomGeoPoints = generateRandomPoints({ 'lat': 40.790, 'lng': -4.010 }, 5000, 1);
          randomGeoPoints = generateRandomPoints({'lat': randomGeoPoints[0][1], 'lng': randomGeoPoints[0][0]}, 1000, 5);
          url = $(this).attr("action");
          var postData = $(this).serializeArray();
          postData.push({ name: 'ruta', value: JSON.stringify(randomGeoPoints) });
          console.log (JSON.stringify(postData));
          $.ajax({
            type: "POST",
            url: url,
            data: postData,
            success: function () {
              location.reload();
            }
          });          
        });
        const osm = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '&copy; OpenStreetMap'
        });

        const esriSat = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
          attribution: 'Tiles ¬© Esri'
        });

        const openTopo = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data: &copy; <a href="https://opentopomap.org">OpenTopoMap</a>, &copy; OpenStreetMap contributors',
        });
        //Aqui ocurre la referenciacion a id="map" que vemos al final del documento 
        var map = L.map('map', {
        fullscreenControl: true,
        fullscreenControlOptions: {
          title: {
            'false': 'Ver en pantalla completa',
            'true': 'Salir de pantalla completa'
          },
          position: 'bottomright'
        },
        layers: [osm] // ‚Üê Capa base inicial
      }).setView([40.790, -4.010], 13);
        L.control.scale({
        }).addTo(map);

        map.addControl(new L.Control.Coordinates({
          position: "bottomleft",
          decimals: 5,
          decimalSeperator: ".",
          labelTemplateLat: "Lat: {y}",
          labelTemplateLng: "Lng: {x}",
          enableUserInput: false,
          useDMS: false, // true para mostrar en grados, minutos, segundos
          useLatLngOrder: true
        }));
        
        
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map)
        const rutasLayerGroup = L.layerGroup().addTo(map);
        const puntosInteresLayerGroup = L.layerGroup().addTo(map);
        const baseMaps = {
        "üó∫Ô∏è OpenStreetMap": osm,
        "üõ∞Ô∏è Sat√©lite (Esri)": esriSat,
        "openTopo": openTopo
        };
        controlCapas = L.control.layers(
        baseMaps,
        {
          'üó∫Ô∏è Rutas': rutasLayerGroup,
          'üìç Puntos de inter√©s': puntosInteresLayerGroup
        },
        { collapsed: true
         } // Opcional: mostrar el panel abierto por defecto
      ).addTo(map);
      /* Invocamos una petici√≥n ajax para recuperar el geojson 
      *  una vez descargado creamos una capa geojson de leaflet y 
      *  la a√±adimos al mapa 
      */ 
// Define la funci√≥n globalmente para que sea accesible en otros contextos
function getEstiloYPopup() {
  return {
    style: function(feature) {
      const dificultad = feature.properties.Dificultad;
      let color;

      // Asignar color seg√∫n la dificultad
      switch (dificultad) {
        case "Baja": color = "#00FF00"; break;
        case "Media": color = "#FFA500"; break;
        case "Alta": color = "#FF0000"; break;
        default: color = "#0000FF"; break; // color por defecto
      }

      return {
        color: color,
        weight: 3,
        opacity: 1
      };
    },
    onEachFeature: function(feature, layer) {
      // Generar la tabla con los atributos
      var tableHtml = "<center><table class='styled-table' style='width:100%; border-collapse: collapse;'><tr><th colspan='2' align='center'><em>Atributos</em></th></tr>";
      tableHtml += generateTableRow('Parque Nacional', feature.properties['Parque Nacional']);
      tableHtml += generateTableRow('Nombre', feature.properties['Nombre']);
      tableHtml += generateTableRow('N√∫mero', feature.properties['N√∫mero']);
      tableHtml += generateTableRow('Tipo', feature.properties['Tipo']);
      tableHtml += generateTableRow('Sentido', feature.properties['Sentido']);
      tableHtml += generateTableRow('Dificultad', feature.properties['Dificultad']);
      tableHtml += generateTableRow('Duraci√≥n (h)', feature.properties['Duraci√≥n (h)']);
      tableHtml += generateTableRow('Longitud (km)', feature.properties['Longitud (km)']);
      tableHtml += generateTableRow('Recomendaciones', feature.properties['Recomendaciones']);

      // Crear un enlace a la p√°gina de la ruta espec√≠fica
      const rutaName = feature.properties['Nombre'];
      const rutaUrl = `/rutaespecifica/${encodeURIComponent(rutaName)}`;
      tableHtml += generateTableRow('Ver m√°s informaci√≥n', `<a href="${rutaUrl}" target="_blank">Ver ruta completa</a>`);

      tableHtml += "</table></center>";
      layer.bindPopup("<strong>" + feature.properties.Nombre + "</strong><br/>" + tableHtml);
    }
  };
}

// Funci√≥n para manejar la carga de datos del GeoJSON
$.getJSON("/geojson", function(data) {
  // Procesar los datos del GeoJSON
  const allFeatures = data.flatMap(r => r.features);

  if (allFeatures.length === 0) {
    console.log('‚ùå No se encontraron rutas iniciales.');
  } else {
    console.log(`‚úÖ Se cargaron ${allFeatures.length} rutas.`);
  }

  // Filtrar las rutas v√°lidas con geometr√≠a
  const validFeatures = allFeatures.filter(feature => feature.geometry);

  if (validFeatures.length === 0) {
    console.log('‚ùå No hay geometr√≠as v√°lidas para mostrar.');
  } else {
    console.log(`‚úÖ Hay ${validFeatures.length} rutas con geometr√≠a v√°lida.`);
  }

   // A√±adir las rutas al grupo de capas
   rutasLayerGroup.clearLayers();  // Limpiar las rutas anteriores si las hay
  L.geoJSON(validFeatures, getEstiloYPopup()).addTo(rutasLayerGroup);

  // Traer las rutas al frente
  rutasLayerGroup.eachLayer(function(layer) {
    layer.bringToFront();
  });
});

fetch('/puntos-interes')
  .then(res => res.json())
  .then(data => {
    if (!data.features) return console.warn("No hay puntos de inter√©s.");

    const icono = L.icon({
      iconUrl: 'images/door-open.svg', // ruta de tu icono
      iconSize: [25, 25],
      iconAnchor: [12, 25],
      popupAnchor: [0, -25]
    });

    data.features.forEach(feature => {
      const coords = feature.geometry.coordinates;
      const props = feature.properties;

      const marker = L.marker([coords[1], coords[0]], { icon: icono }).bindPopup(`
        <strong>${props.DS_CENTRO}</strong><br>
        ${props.DS_MUNICIP}<br>
        ${props.DS_DIRECCI}<br>
        Tel: ${props.DS_TELEFON}
      `);

      puntosInteresLayerGroup.addLayer(marker);
    });

    puntosInteresLayerGroup.addTo(map); // aseg√∫rate que 'map' ya est√° declarado
  })
  .catch(err => console.error("‚ùå Error cargando puntos de inter√©s:", err));

// Aplicar filtros
document.getElementById('aplicarFiltros').addEventListener('click', () => {
  const duracion = document.getElementById('filtroDuracion').value;
  const longitud = document.getElementById('filtroLongitud').value;
  const dificultad = document.getElementById('filtroDificultad').value;
  const sentido = document.getElementById('filtroSentido').value;

  const params = new URLSearchParams();
  // Duraci√≥n (horas)
  const mapaDuracion = {
    "Menos de una hora": [0, 1],
    "Entre 1 y 2 horas": [1, 2],
    "Entre 2 y 4 horas": [2, 4],
    "Entre 4 y 6 horas": [4, 6],
    "M√°s de 6 horas": [6, 99]
  };
  // Distancia (km)
  const mapaLongitud = {
    "Menos de 5 km": [0, 5],
    "De 5 a 10 km": [5, 10],
    "De 10 a 15 km": [10, 15],
    "De 15 a 20 km": [15, 20],
    "M√°s de 20 km": [20, 99]
  };

  if (duracion && mapaDuracion[duracion]) {
    const [minDur, maxDur] = mapaDuracion[duracion];
    params.append('minDuracion', minDur);
    params.append('maxDuracion', maxDur);
  }

  if (longitud && mapaLongitud[longitud]) {
    const [minDist, maxDist] = mapaLongitud[longitud];
    params.append('minDistancia', minDist);
    params.append('maxDistancia', maxDist);
  }
  if (dificultad) params.append('dificultad', dificultad);
  if (sentido) params.append('sentido', sentido);

  fetch(`/filtrar-rutas?${params.toString()}`)
  .then(res => res.json())
  .then(data => {
    const mensajeDiv = document.getElementById('mensajeFiltros');

    if (data.length === 0) {
      console.log(' No se encontraron rutas con esos filtros.');
      mensajeDiv.textContent = ' No se encontraron rutas con esos filtros.';
      mensajeDiv.style.color = 'red';
    } else {
      console.log(` Se aplicaron los filtros, se encontraron ${data.length} rutas.`);
      mensajeDiv.textContent = ` Se aplicaron los filtros. Se encontraron ${data.length} rutas.`;
      mensajeDiv.style.color = 'green';
      
      // Limpiar las rutas anteriores en el mapa
      rutasLayerGroup.clearLayers();
      
      // A√±adir las rutas filtradas al grupo de capas
      const allFeatures = data.flatMap(r => r.features); // Aseg√∫rate de que data contiene las rutas con geometr√≠a

      // Verifica si allFeatures contiene geometr√≠a v√°lida
      const validFeatures = allFeatures.filter(feature => feature.geometry);

      if (validFeatures.length === 0) {
        console.log('‚ùå No hay rutas con geometr√≠a v√°lida.');
      } else {
        const geojsonLayer = L.geoJSON(validFeatures, getEstiloYPopup()).addTo(rutasLayerGroup);

        // üëâ Centrar el mapa en las rutas visibles
        map.fitBounds(geojsonLayer.getBounds());
      }

      // Traer las rutas al frente
      rutasLayerGroup.eachLayer(function(layer) {
        layer.bringToFront();
      });
    }
  })
  .catch(err => console.error('Error al aplicar filtros:', err));
});

    L.easyPrint({
          title: 'Descargar mapa',
          position: 'topleft',
          filename: 'Mapa personal',
          sizeModes: ['Current', 'A4Landscape', 'A4Portrait'],
          exportOnly: true,
          hiddenControlContainer: true
    }).addTo(map);

    setTimeout(() => {
    const items = document.querySelectorAll('.leaflet-control-easyPrint .easyPrintSizeMode');

    items.forEach(item => {
      const a = item.querySelector('a');
      if (a) {
        if (a.classList.contains('CurrentSize')) {
          a.title = 'Tama√±o visible';
        }
        if (a.classList.contains('A4Portrait')) {
          a.title = 'A4 Vertical';
        }
        if (a.classList.contains('A4Landscape')) {
          a.title = 'A4 Horizontal';
        }
      }
    });
    }, 500);

    // Funci√≥n para generar filas de la tabla
    function generateTableRow(label, value) {
      return "<tr><th style='padding: 8px; text-align: left;'>" + label + "</th><td style='padding: 8px;'>" + value + "</td></tr>";
    }
    $('#btn-medir').on('click', () => {
    midiendo = !midiendo;
    puntosMedicion = [];

    if (lineaMedicion) {
      map.removeLayer(lineaMedicion);
      lineaMedicion = null;
    }
    if (marcadorInicio) {
      map.removeLayer(marcadorInicio);
      marcadorInicio = null;
    }
    if (marcadorFin) {
      map.removeLayer(marcadorFin);
      marcadorFin = null;
    }

    alert(midiendo ? 'Modo medici√≥n activado. Haz clic en el mapa para seleccionar dos puntos.' : 'Modo medici√≥n desactivado.');
  });

  map.on('click', function (e) {
    if (!midiendo) return;

    puntosMedicion.push(e.latlng);

    if (puntosMedicion.length === 1) {
      marcadorInicio = L.marker(e.latlng).addTo(map);
    }

    if (puntosMedicion.length === 2) {
      marcadorFin = L.marker(e.latlng).addTo(map);
      lineaMedicion = L.polyline(puntosMedicion, { color: 'blue', weight: 3 }).addTo(map);

      const distancia = map.distance(puntosMedicion[0], puntosMedicion[1]);
      const distanciaKm = (distancia / 1000).toFixed(2);

      L.popup()
        .setLatLng(puntosMedicion[1])
        .setContent(`Distancia: ${distanciaKm} km`)
        .openOn(map);

      // Reset
      midiendo = false;
      puntosMedicion = [];
    }
  });
  });
    
    </script> 
    <div id="map" style="border: 2px solid black; box-sizing: border-box; z-index: 21; margin: 40px;"></div>
    <% include footer %>
    </div>
  </body>
</html>
